<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C4Coffee</title>
    <description>&gt; Engineer. Robot. Coffee.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 30 Oct 2016 23:29:36 -0700</pubDate>
    <lastBuildDate>Sun, 30 Oct 2016 23:29:36 -0700</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>DIY AM Radio Design - Part1: Background</title>
        <description>&lt;p&gt;As part of a project course over the summer, we were tasked to build a self-powered AM radio with easy assembly. The motivations were as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Easy assembly allows good education material for younger children&lt;/li&gt;
  &lt;li&gt;Self-powering allows for use during emergency situations&lt;/li&gt;
  &lt;li&gt;There is good AM radio coverage in the Vancouver area&lt;/li&gt;
  &lt;li&gt;FM radios are slightly more complicated than AM radio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are sections extracted from our team’s final report.&lt;/p&gt;

&lt;h2 id=&quot;construction-background&quot;&gt;Construction Background&lt;/h2&gt;

&lt;p&gt;Shown below is a block diagram of what we recognized as the major components required for the construction of an AM radio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016-10-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;b&gt;RF(Radio Frequency) receiver&lt;/b&gt; is an electrical component that captures electromagnetic waves in the radio frequency range and converts it to electrical power. &lt;br /&gt;
Our &lt;b&gt;RF selection mechanism&lt;/b&gt; is essentially a frequency filter that will allow us to choose the frequency at which we are listening to. It is important to note that in most cases, the RF receiver does not exclusively receive one single channel, therefore a filter is required to filter out other channels we do not want. &lt;br /&gt;
The next important step is to amplify the RF signal received. But from research it was realized quickly that RF amplification was not an easy task, and that for the applications of our project it was unnecessary.  &lt;br /&gt;
Since there was no RF Amplification, &lt;b&gt;AF(Audio Frequency) Amplification&lt;/b&gt; was necessary after &lt;b&gt;Demodulation&lt;/b&gt; where the carrier signal was separated from our modulated signal.&lt;/p&gt;

&lt;h2 id=&quot;signal-processing-background&quot;&gt;Signal Processing Background&lt;/h2&gt;

&lt;p&gt;The most important concept to learn for this project was the theory behind modulation. In the simplest terms, AM modulation simply meant that we have a very fast oscillating &lt;b&gt;carrier signal&lt;/b&gt; that was representing itself as our &lt;b&gt;information signal&lt;/b&gt;, which are the audio signals from the radio stations in our case.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: flex; justify-content: center;&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/a4/Amfm3-en-de.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To understand &lt;b&gt;demodulation&lt;/b&gt; it would be important to understand how to interpret the signals. Sine signals can be represented by two peaks at +/- of their frequencies. Like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blogs.mathworks.com/images/steve/2009/F_cos_t.png&quot; alt=&quot;mathworks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the combination of our modulated signal and our carrier signal, we will get something that looks more like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/AM_spectrum.svg/600px-AM_spectrum.svg.png&quot; alt=&quot;wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Where the signal above is the signal we are modulating, and the signals below is our same signal after modulation. It can be observed that the original signal centered is now separated into two signals at higher frequencies. This is because, our original signal is now being represented by a signal that oscillates at higher frequencies.&lt;/p&gt;

&lt;p&gt;Image sources:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File:Amfm3-en-de.gif&quot;&gt;Wikepedia: Amplitude Modulation GIF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.mathworks.com/steve/2010/05/27/negative-frequencies/&quot;&gt;Mathworks Blogs: Steve Eddins on Negative Frequencies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File:AM_spectrum.svg&quot;&gt;Wikipedia: Amplitude Modulation AM Spectrum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/10/30/diy-am-radio.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/30/diy-am-radio.html</guid>
        
        
      </item>
    
      <item>
        <title>Understanding ROS</title>
        <description>&lt;p&gt;Recently I’ve been reached out via email, A2A about the function of ROS. For people who are new to ROS, it is hard to grasp what ROS is and why we need it. Below is a copy of the question, link to the question, and my answer.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;~~~&lt;/p&gt;

&lt;h1 id=&quot;question-what-is-the-role-of-ros-in-a-complete-robothttpanswersrosorgquestion237411what-is-the-role-of-ros-in-a-complete-robot237420&quot;&gt;&lt;a href=&quot;http://answers.ros.org/question/237411/what-is-the-role-of-ros-in-a-complete-robot/#237420&quot;&gt;Question: What is the role of ROS in a complete robot?&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;After raising this question, I’ve realized that, unlike what I’ve known as an iOS developer that iOS is almost the only thing we developers should concern, ROS itself is not an operating system but a framework, a set of libraries. And besides that, what a robot exposes to developers are far more than an iPhone does. So these are all new concepts for me to absorb and it may take a while ;)&lt;/p&gt;

&lt;p&gt;My question is, what’s the role of ROS in a robot?&lt;/p&gt;

&lt;p&gt;Can someone please give us a detailed explanation of what a robot is generally comprised of, with examples? Say in Roomba, I know it has its own operating system; what part of Roomba plays a similar role as ROS?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;snakeninny&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;~~~&lt;/p&gt;

&lt;p&gt;Hello snakeninny,&lt;/p&gt;

&lt;p&gt;At this point in your research I hope you now understand the concept of nodes and packages in ROS, or simply the existence of them. Due to the complexity of a lot of the decisions made or computations being performed by the robot, it is no longer feasible for all of the software to be written in one package. Therefore a lot of functionalities are grouped into these nodes and executed together.&lt;/p&gt;

&lt;p&gt;From your background, you can understand these nodes as objects that does different things. Eg. A node that processes computer vision; an eye object. A node that processes speech; an mouth object. A node that processes actuator controls, a cerebellum object. Objects in a OOD sense.&lt;/p&gt;

&lt;p&gt;What ROS as an “operating system” does is to facilitate a framework where these nodes can all communicate with one another to perform complex tasks that requires simultaneous stimuli from different sensors and perform calculations.&lt;/p&gt;

&lt;p&gt;The Roomba is a very simple robot compared to other systems you may see being created with ROS. A Roomba replica can easily be created with an Arduino. It’s like comparing a goldfish to a human brain. We can no doubt sleep, eat and move as a goldfish can; just like how a ROS system can do what a Roomba does. But in cases where you want to be able to tell the difference between what you are eating, or being able to dance, a goldfish cannot do that.&lt;/p&gt;

&lt;p&gt;In most cases, I like to think of micro controllers like the arduino as controllers for individual components, taking orders from individual nodes. Eg. A movement node says it wants to move forward, and the arduino controls the ESC on the robot to move the motor. The arduino knows how to turn, how to activate motors, but it will not be smart enough to know how to move to properly tango.&lt;/p&gt;

&lt;p&gt;A usual chain of command in systems I work with looks something like:&lt;/p&gt;

&lt;p&gt;Sensors detect object
AI node uses other sensors to decide what type of object it is
AI decides that it needs to move left-forward-right to avoid the object
Movement node receives left-forward-right command from AI
Movement node sends left, forward, right as seperate commands to the Arduino that controlls the motors, checking between commands that the robot is moving correctly.
All this is based off of my own understanding and experience with ROS, and ROS can certainly be more complex or simple depending on the application. But hopefully this is a starting point for you.&lt;/p&gt;

&lt;p&gt;Cheers, Dulluhan&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;~~~&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/06/14/Understanding-ROS.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/14/Understanding-ROS.html</guid>
        
        
      </item>
    
      <item>
        <title>Arduino Serial Communication Problem and Fix</title>
        <description>&lt;p&gt;Since the primary work I do is interfacing ROS with microcontrollers for sensor/actuator controls, I would like to share a problem that you may often encounter when doing any time of data transmission.&lt;/p&gt;

&lt;p&gt;Of course there may be more elegant ways of solving this issues if these are even issues. But from what I observed before and after the fixes, my hypothesis for the problems seemed to be solved.&lt;/p&gt;

&lt;h1 id=&quot;buffer-flushing-for-arduinos&quot;&gt;Buffer Flushing for arduinos&lt;/h1&gt;
&lt;p&gt;Problem: When ROS loops are running at a frequency much higher than the arduino can process incoming commands, you may get problems with data in your buffer either holding too much, or not being processed correctly.&lt;/p&gt;

&lt;p&gt;Situation: Our method of actuator resolves around sending custom &lt;a href=&quot;http://docs.ros.org/api/geometry_msgs/html/msg/Twist.html&quot;&gt;twist messages&lt;/a&gt; that have the format of: (Lx, Ly, Az). Where Lx/Ly is linear x,y and Az is angular z. What they give us are the motion commands of moving forwards, sideways and turning.&lt;/p&gt;

&lt;p&gt;When the robot is hooked up to our laptop via USB, we are constantly bombarding the arduino serial port with multiple twist messages a second. I have observed that under certain circumstances, the arduino will either process messages with slight delay to the computed twist messages, or it will competely “hang” and freeze the serial port.&lt;/p&gt;

&lt;p&gt;Of course the first solution I thought of was to flush the buffer via &lt;code class=&quot;highlighter-rouge&quot;&gt;Serial.flush();&lt;/code&gt; for the arduino to always process the newest data. However, what I did not know was that the arduino’s flush function under the HardwareSerial.h library was flushing the output buffer not the input buffer, therefore I had to dig around on the internet to see what &lt;a href=&quot;https://forum.sparkfun.com/viewtopic.php?f=32&amp;amp;t=32715&quot;&gt;others have done to fix this problem.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solution: Adding a function to the HarwareSerial.cpp file in the Arduino library files.&lt;/p&gt;

&lt;p&gt;For the .h, add a new function declaration &lt;code class=&quot;highlighter-rouge&quot;&gt;virtual void flushRX();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the .cpp, add the rest of the function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HardwareSerial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flushRX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_rx_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_rx_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 27 Mar 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/03/27/Arduino-Serial-Communication-Fix.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/27/Arduino-Serial-Communication-Fix.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting Up ChromeOS for ROS</title>
        <description>&lt;p&gt;This post will be focused on listing the preliminary setup requied to facilitate ROS on Chromebooks. The Chromebook that I will be using through this post will be a c720 (2gb/2995U).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;~~~&lt;/p&gt;

&lt;p&gt;To start it is important to discuss the different options that are offered to Chromebooks for running Linux. If your are just getting into the Chromebook lineup, you probably have heard about Chrubuntu and Crouton. Here are my 2cents on the differnce:&lt;/p&gt;

&lt;h1 id=&quot;chrubuntuhttpswwwredditcomrchrubuntucomments1rsxkdlistoffixesforxubuntu1310ontheacerc720&quot;&gt;&lt;a href=&quot;https://www.reddit.com/r/chrubuntu/comments/1rsxkd/list_of_fixes_for_xubuntu_1310_on_the_acer_c720&quot;&gt;Chrubuntu&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt; Chrubuntu is essentially a hack to bring any Linux distro of your choice in replacement of ChromeOS that comes with your chromebook. I have used this for the longest time in the past and it has caused me more problems than not. Particularily hardware compatibiltiy is the primary concern. From fixing the trackpad to optimizing chrome on a clean linux install, its just not worth the effort in my personal opinion. 
&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;croutonhttpsgithubcomdnschneidcrouton&quot;&gt;&lt;a href=&quot;https://github.com/dnschneid/crouton&quot;&gt;Crouton&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Crouton stands for ChRomium Os Universal chrooT envirONment. Understanding crouton from the surface is that you are essentially running ChromeOS parallel to a distro of your choice. I resorted to Crouton again after a whole year of Chrubuntu simply because I was sick of dealing with the trackpad and processor problems after os updates with Chrubuntu.     
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;~~~&lt;/p&gt;

&lt;p&gt;In the end of the day I picked crouton, and what I am left with all the benefits of optimized software from Chromebook and the power of a fully functional linux distro. Besides, having a chromeOS operating a robot is hilarious.&lt;/p&gt;

&lt;p&gt;Now to discuss somethings that will make your ROS setup and usage smooth:&lt;/p&gt;

&lt;h1 id=&quot;xiwihttpsgithubcomdnschneidcroutonwikicrouton-in-a-chromium-os-window-xiwi&quot;&gt;&lt;a href=&quot;https://github.com/dnschneid/crouton/wiki/crouton-in-a-Chromium-OS-window-(xiwi)&quot;&gt;xiwi&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Xiwi is just X11 in a window. Rather than having to switch between workspaces using the ctrl+shift+alt+F1 “shortcut”, you can just have your chroot (crouton instance) running in a window. The whole concept is just -x forwarding your workplace to the chromOS bash shell.&lt;/p&gt;

&lt;p&gt;To install xiwi you can include the installation of it at the initial setup of your chroot.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo sh ~/Downloads/crouton -t xiwi,xfce&lt;/code&gt;&lt;br /&gt;
In the case where you decide to use xubuntu as your chroot distro.&lt;/p&gt;

&lt;p&gt;Alternatively you can upgrade your current chroot. For example, if I was using ubuntu precise, I can update it via: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo sh ~/Downloads/crouton -n precise -u -t xiwi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After installation, if you would like to run instances of your chroot you can just -x forward it to xiwi: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo distro -X xiwi&lt;/code&gt;  eg. $ sudo startxfce4 -X xiwi&lt;/p&gt;

&lt;p&gt;If you just want to run the CLI, you can run: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo enter-chroot&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo enter-chroot -n chroot_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can even run specific programs like so: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo enter-chroot&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;$ xiwi -T arduino&lt;/code&gt;(tab) or &lt;code class=&quot;highlighter-rouge&quot;&gt;$ xiwi -F arduino&lt;/code&gt;(window) after you enter your chroot. Further, by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; to indicate that you want to run the program with the terminal prompt still being available. 
Forwarded programs can be killed via &lt;code class=&quot;highlighter-rouge&quot;&gt;$ kill&lt;/code&gt; or simply closing the window/tab.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;ros-installation-notes&quot;&gt;ROS Installation Notes&lt;/h1&gt;

&lt;p&gt;One of the only crippling problem that took me a bit to fix was that ROS could would not install on xfce that I had setup on my initial install of crouton. After some research I realized that the version of xubuntu I was running was not supported. It is important to note that I am setting up ROS-indigo for compatibility with my teams’ code&lt;/p&gt;

&lt;p&gt;After reading the &lt;a href=&quot;http://wiki.ros.org/indigo/Installation/Ubuntu&quot;&gt;ROS-indgo’s installation page&lt;/a&gt; I realized that Precise was no longer supported. I therefore had to do an &lt;a href=&quot;https://github.com/dnschneid/crouton/wiki/Upgrade-chroot-release&quot;&gt;OS update to Trusty&lt;/a&gt;. After that a simple installation &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install ros-indigo-desktop-full&lt;/code&gt; was able to set me up.&lt;/p&gt;

&lt;p&gt;Don’t forget to &lt;code class=&quot;highlighter-rouge&quot;&gt;$ source /opt/ros/indigo/setup.bash&lt;/code&gt; or echo it into your .bashrc as I scratched my head over &lt;code class=&quot;highlighter-rouge&quot;&gt;$ roscore&lt;/code&gt; giving me &lt;code class=&quot;highlighter-rouge&quot;&gt;command not found&lt;/code&gt; for the longest time.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;other-software&quot;&gt;Other Software&lt;/h1&gt;

&lt;p&gt;Originally the thing I was most concerned with was my control over serial or networking ports. As my job surrounds alot around testing firmware 
via USB, I was worried that chromebooks would have some security feature that would lock it up to prevent me from accessing them. But lo and behold:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/8agwotmdphbw1eq/Screenshot%202016-03-24%20at%2011.11.53%20PM.png?raw=1&quot; class=&quot;img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also to verify, the permissions carry over in chroot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7q1h4ccf8m6zhrs/Screenshot%202016-03-24%20at%2011.14.57%20PM.png?raw=1&quot; class=&quot;img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I also tested program’s abilities to access these ports. Eg. Arduino. A easy blinky test on an uno showed that everything seems to be setup for development. Installing arduino in the chroot, I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo xiwi -F arduino&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0h1y9ainpfhxeuh/Screenshot%202016-03-25%20at%2012.07.50%20AM.png?raw=1&quot; class=&quot;img-thumbnail&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/ros/2016/03/24/Setting-Up-ChromeOS-For-ROS.html</link>
        <guid isPermaLink="true">http://localhost:4000/ros/2016/03/24/Setting-Up-ChromeOS-For-ROS.html</guid>
        
        
        <category>ROS</category>
        
      </item>
    
      <item>
        <title>ChromeOS as a Robotics Platform</title>
        <description>&lt;p&gt;After purging my old setup for the blog since it was empty and gross, I decide to start the fresh blog with an useful post. After 9 hours of testing and tweaking I finally removed chrubuntu from my c720 and installed crouton with xfce::ubuntu14.04 (Which is very important as ROS-indigo does not support 10.2 which is default with crouton)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kqe8xq0li0e227x/Screenshot%202016-03-23%20at%2011.35.12%20PM.png?raw=1&quot; class=&quot;img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The beauty of this setup however lies in the fact that I can run a suite of tools that are essential for my job on the team to produce software and firmware. This includes being able to build our system under Robotics Operating System(ROS) and arduino code for the firmware side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0cl6i39zlq3z8yo/Screenshot%202016-03-23%20at%2011.57.23%20PM.png?raw=1&quot; class=&quot;img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is midnight so ideally, in the next few days I can put up a few more posts regarding not only setting up ROS on chromeOS but also some jekyll tutorials since there were certain things that took me a while to learn. As I start writing more posts I will also be able to add some more setup screen shots once my c100 gets here for me to abuse.&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Mar 2016 23:18:42 -0700</pubDate>
        <link>http://localhost:4000/ros/2016/03/23/chromeOS-as-a-robotics-platform.html</link>
        <guid isPermaLink="true">http://localhost:4000/ros/2016/03/23/chromeOS-as-a-robotics-platform.html</guid>
        
        
        <category>ROS</category>
        
      </item>
    
  </channel>
</rss>
